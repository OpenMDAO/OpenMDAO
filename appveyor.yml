build: off

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Previous Ubuntu
      PYTHON: 3.7
      NUMPY: 1.15
      SCIPY: 1.0.1
      PETSc: 3.9.1

    - APPVEYOR_BUILD_WORKER_IMAGE: Previous Ubuntu
      PYTHON: 3.6
      NUMPY: 1.15
      SCIPY: 1.0.1
      PETSc: 3.9.1

    - APPVEYOR_BUILD_WORKER_IMAGE: Previous Ubuntu
      PYTHON: 2.7
      NUMPY: 1.15
      SCIPY: 1.0.1
      # PETSc: 3.9.1

    - APPVEYOR_BUILD_WORKER_IMAGE: Previous Visual Studio 2017
      PYTHON: 2.7
      # MKL: 2018.0.2  # Math Kernel Library
      NUMPY: 1.15
      SCIPY: 1.0.1

    - APPVEYOR_BUILD_WORKER_IMAGE: Previous Visual Studio 2017
      PYTHON: 3.7
      # MKL: 2018.0.2  # Math Kernel Library
      NUMPY: 1.16
      SCIPY: 1.2

  encrypted_74d70a284b7d_key:
    secure: 7u/kPupG0BmwqAJOLeyGMPakwj3lqukKHXsxEP4+6aX+Huu8VH2ZkDNq6GYlaw6HGJHi2JTAal9VDgOpZc9RMlweOrXJiNFWS3Iu0chy+L4=

  encrypted_74d70a284b7d_iv:
    secure: ZvlRNZ0mVCgCzlscRSABvE8CJUdCU2oAE5AucD0GHz3iGWasTe7k6bBswulzhn18

  SNOPT_LOCATION:
    secure: BMuN2XRyyMclCtx+SGQCMNgbtSplR5GnBKRZVvotqd1SO6aNpMyh+Hqv+23+vBMFcN7te93hDiAE5+joj4R+H4sGGyeRb+khsu/sILHZaLQ=

install:
- sh:
    if [ "$encrypted_74d70a284b7d_key" ]; then
      openssl aes-256-cbc -K $encrypted_74d70a284b7d_key -iv $encrypted_74d70a284b7d_iv -in travis_deploy_rsa.enc -out /tmp/travis_deploy_rsa -d;
      eval "$(ssh-agent -s)";
      chmod 600 /tmp/travis_deploy_rsa;
      ssh-add /tmp/travis_deploy_rsa;
      echo -e "Host web543.webfaction.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config;
    fi

    sudo add-apt-repository ppa:ubuntu-toolchain-r/test;
    sudo apt-get update;
    sudo apt-get -y install gfortran;
    sudo apt-get -y install libblas-dev;
    sudo apt-get -y install liblapack-dev;
    sudo apt-get -y install libopenmpi-dev;
    sudo apt-get -y install openmpi-bin;

    echo ">>> Building python environment";
    echo " >> Installing conda";
    echo "  > Downloading miniconda";
    wget "https://repo.continuum.io/miniconda/Miniconda${PYTHON:0:1}-4.5.11-Linux-x86_64.sh" -O miniconda.sh;
    chmod +x miniconda.sh;
    echo "  > Installing miniconda";
    ./miniconda.sh -b  -p $HOME/miniconda;
    export PATH=$HOME/miniconda/bin:$PATH;

    echo " >> Creating conda environment";
    conda create --yes -n PY$PYTHON python=$PYTHON;
    source $HOME/miniconda/bin/activate PY$PYTHON;

    echo " >> Installing non-pure Python dependencies from conda";
    conda install --yes numpy=$NUMPY scipy=$SCIPY cython swig;

    pip install --upgrade pip;

    echo " >> Installing forked python packages";
    pip install git+https://github.com/swryan/coveralls-python@work;

    echo " >> Installing pyOptSparse";
    echo "  > Cloning pyOptSparse from OpenMDAO's fork";
    git clone https://github.com/OpenMDAO/pyoptsparse.git;
    cd pyoptsparse;

    if [ "$SNOPT_LOCATION" ] && [ "${PYTHON:0:1}" = "3" ]; then
      cd pyoptsparse/pySNOPT;
      echo "  > Secure copying SNOPT over SSH";
      scp -r "$SNOPT_LOCATION" ./source;
      cd ../..;
    fi

    echo "  > Install pyOptSparse";
    python setup.py install;
    cd ..;

    if [ "$PETSc" ]; then
      echo " >> Installing parallel processing dependencies";
      pip install mpi4py;
      pip install petsc4py==$PETSc;
    fi

    echo ">>> Installing OpenMDAO";
    pip install .[all];
    conda list;

- cmd: if %PYTHON% GTR 3 (set CONDA="C:\\Miniconda3%PYTHON:~2%-x64") else (set CONDA="C:\\Miniconda-x64")
- cmd: set PATH=%CONDA%;%CONDA%\Scripts;%PATH%
- cmd: conda config --set always_yes yes
- cmd: conda update conda
- cmd: conda install python=%PYTHON% numpy=%NUMPY% scipy=%SCIPY% pip --quiet
- cmd: cd C:\projects\blue*
- cmd: pip install -e .[all]
- cmd: conda list

test_script:
- sh: testflo . -n 1;
- cmd: testflo . -n 1

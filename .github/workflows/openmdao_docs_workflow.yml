name: OpenMDAO Docs

on:
  # Trigger on push or pull request events for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Trigger on release, to publish release versioned docs to openmdao.org
  release:
    types: [published]

  # Allow running the workflow manually from the Actions tab
  # All jobs are included by default and may be deselected if desired
  workflow_dispatch:

    inputs:

      run_name:
        type: string
        description: 'Name of workflow run as it will appear under Actions tab:'
        required: false
        default: ""

      Ubuntu_Baseline:
        type: boolean
        description: 'Include Ubuntu Baseline in test matrix'
        required: false
        default: true

      MacOS_Baseline:
        type: boolean
        description: 'Include MacOS Baseline in test matrix'
        required: false
        default: true

      Windows_Baseline:
        type: boolean
        description: 'Include Windows Baseline in test matrix'
        required: false
        default: true

      Ubuntu_Minimal:
        type: boolean
        description: 'Include Ubuntu Minimal in test matrix'
        required: false
        default: true

      Ubuntu_Oldest:
        type: boolean
        description: 'Include Ubuntu Oldest in test matrix'
        required: false
        default: true

      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

      use_pypi:
        type: boolean
        description: 'Run tests against the published PyPi version of OpenMDAO'
        required: false
        default: false


run-name:  ${{ inputs.run_name }}

permissions: {}

jobs:

  tests:

    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        include:
          # test baseline versions on Ubuntu
          - NAME: Ubuntu Baseline
            OS: ubuntu-24.04
            PY: '3.13'
            NUMPY: '2.2'
            SCIPY: '1.16'
            PETSc: '3.21'
            PYOPTSPARSE_FROM: 'conda-forge'
            PYOPTSPARSE: '2.13.1'
            SNOPT: '7.7'
            OPTIONAL: '[all,numba]'
            BANDIT: true
            PEP517: true
            EXCLUDE: ${{ github.event_name == 'workflow_dispatch'  && ! inputs.Ubuntu_Baseline }}

          # # test baseline versions on MacOS
          # - NAME: MacOS Baseline
          #   OS: macos-15
          #   PY: '3.13'
          #   NUMPY: '2.2'
          #   SCIPY: '1.15'
          #   PETSc: '3.21'
          #   PYOPTSPARSE_FROM: 'build_pyoptsparse'
          #   PYOPTSPARSE: '2.13.1'
          #   SNOPT: '7.7'
          #   OPTIONAL: '[all]'
          #   EXCLUDE: ${{ github.event_name == 'workflow_dispatch'  && ! inputs.MacOS_Baseline }}

          # # test minimal install
          # - NAME: Ubuntu Minimal
          #   OS: ubuntu-24.04
          #   PY: '3.13'
          #   NUMPY: '2.2'
          #   SCIPY: '1.15'
          #   OPTIONAL: '[test]'
          #   EXCLUDE: ${{ github.event_name == 'workflow_dispatch'  && ! inputs.Ubuntu_Minimal }}

          # # test oldest supported versions
          # - NAME: Ubuntu Oldest
          #   OS: ubuntu-22.04
          #   PY: '3.10'
          #   NUMPY: '1.26'
          #   SCIPY: '1.12'
          #   PETSc: '3.20'
          #   OPENMPI: '4.1'
          #   PYOPTSPARSE_FROM: 'build_pyoptsparse'
          #   PYOPTSPARSE: '2.10.2'
          #   SNOPT: '7.7'
          #   OPTIONAL: '[all]'
          #   EXCLUDE: ${{ github.event_name == 'workflow_dispatch'  && ! inputs.Ubuntu_Oldest }}

    runs-on: ${{ matrix.OS }}

    name: ${{ matrix.NAME }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Display run details
        run: |
          echo "============================================================="
          echo "Run #${GITHUB_RUN_NUMBER}"
          echo "Run ID: ${GITHUB_RUN_ID}"
          echo "Testing: ${GITHUB_REPOSITORY}"
          echo "Triggered by: ${GITHUB_EVENT_NAME}"
          echo "Initiated by: ${GITHUB_ACTOR}"
          echo "============================================================="

      - name: Exit if this job was excluded
        if: matrix.EXCLUDE
        uses: actions/github-script@v7
        with:
          script: core.setFailed('The ${{ matrix.NAME }} job was excluded from the run, exiting...');

      - name: Create SSH key
        if: matrix.SNOPT
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.PY }}
          conda-remove-defaults: true
          channels: conda-forge

      - name: Install OpenMDAO
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y

          python -m pip install --upgrade pip

          echo "============================================================="
          echo "Install OpenMDAO"
          echo "============================================================="
          if [[  "${{ inputs.use_pypi }}" == "true" ]]; then
            echo "-----------------------------------------------------------"
            echo "Installing from PyPi"
            echo "-----------------------------------------------------------"
            python -m pip install openmdao${{ matrix.OPTIONAL }}
          elif [[ "${{ matrix.PEP517 }}" == "true" ]]; then
            pip wheel --no-deps --use-pep517 .
            WHEEL=`find openmdao-*.whl`
            echo "-----------------------------------------------------------"
            echo "Installing from wheel: $WHEEL"
            echo "-----------------------------------------------------------"
            python -m pip install $WHEEL${{ matrix.OPTIONAL }}
          else
            python -m pip install .${{ matrix.OPTIONAL }}
          fi

      - name: Install compilers
        if: matrix.PYOPTSPARSE
        run: |
          echo "============================================================="
          echo "Install compilers"
          echo "============================================================="
          if [[  "${{ matrix.OS }}" != "macos-15" ]]; then
            conda install cython swig compilers cmake meson openmp -q -y
          else
            conda install cython swig compilers cmake meson -q -y
          fi

      - name: Install PETSc
        if: matrix.PETSc
        run: |
          echo "============================================================="
          echo "Install PETSc"
          echo "============================================================="
          if [[ "${{ matrix.MPICH }}" ]]; then
            conda install mpich-mpicc=${{ matrix.MPICH }} -q -y
          elif [[ "${{ matrix.OPENMPI }}" ]]; then
            conda install openmpi-mpicc=${{ matrix.OPENMPI }} -q -y
          else
            conda install openmpi-mpicc -q -y
          fi

          if [[ "${{ matrix.MPI4PY }}" ]]; then
            conda install mpi4py=${{ matrix.MPI4PY }} petsc4py=${{ matrix.PETSc }} -q -y
          else
            conda install mpi4py petsc4py=${{ matrix.PETSc }} -q -y
          fi

          echo "============================================================="
          echo "Check MPI and PETSc installation"
          echo "============================================================="
          export PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe
          export OMPI_MCA_rmaps_base_oversubscribe=1
          export OMPI_MCA_btl=^openib
          echo "-----------------------"
          echo "Quick test of mpi4py:"
          mpirun -n 3 python -c "from mpi4py import MPI; print(f'Rank: {MPI.COMM_WORLD.rank}')"
          echo "-----------------------"
          echo "Quick test of petsc4py:"
          mpirun -n 3 python -c "import numpy; from mpi4py import MPI; comm = MPI.COMM_WORLD; \
                                 import petsc4py; petsc4py.init(); \
                                 x = petsc4py.PETSc.Vec().createWithArray(numpy.ones(5)*comm.rank, comm=comm);  \
                                 print(x.getArray())"
          echo "-----------------------"

          echo "PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe" >> $GITHUB_ENV
          echo "OMPI_MCA_rmaps_base_oversubscribe=1" >> $GITHUB_ENV
          echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV

          echo "Workaround for intermittent failures with OMPI https://github.com/open-mpi/ompi/issues/7393"
          echo "TMPDIR=/tmp" >> $GITHUB_ENV

      - name: Build SNOPT
        if: matrix.PYOPTSPARSE_FROM != 'build_pyoptsparse' && matrix.SNOPT
        continue-on-error: false
        run: |
          echo "============================================================="
          echo "Build SNOPT library"
          echo "============================================================="
          if [[ "${{ secrets.SNOPT_LOCATION }}" && "${{ matrix.SNOPT }}" == "7.7" ]]; then
            echo "-------------------------------------------------------------"
            echo "Getting SNOPT source"
            echo "-------------------------------------------------------------"
            scp -qr ${{ secrets.SNOPT_LOCATION }} .
          elif [[ "${{ matrix.SNOPT }}" ]]; then
            echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available"
          fi

          if [ -d "SNOPT" ] ; then
            echo "-------------------------------------------------------------"
            echo "Building SNOPT"
            echo "-------------------------------------------------------------"
            cd SNOPT
            ./configure
            make
            make check

            echo "-------------------------------------------------------------"
            echo "Building Python bindings"
            echo "-------------------------------------------------------------"
            echo "  > Copying required files from pySNOPT.."

            git clone https://github.com/mdolab/pyoptsparse $HOME/pyoptsparse

            PYSNOPT_SOURCE=$HOME/pyoptsparse/pyoptsparse/pySNOPT/source/
            cp -v $PYSNOPT_SOURCE/*.f src/
            cp -v $PYSNOPT_SOURCE/f2py/snopt.pyf .

            echo "  > Removing problematic files..."
            rm -f src/snopth.f
            rm -f src/sn27lu77.f
            rm -f src/sn27lu90.f

            echo "  > Building Python bindings..."
            python -m numpy.f2py -m snopt -c snopt.pyf src/*.f -L`pwd`/lib -L/lib -lsnopt7

            echo "-------------------------------------------------------------"
            echo "Try to import SNOPT"
            echo "-------------------------------------------------------------"
            python -c "import snopt; print(snopt)"

            echo "-------------------------------------------------------------"
            echo "Set PYOPTSPARSE_IMPORT_SNOPT_FROM for subsequent steps"
            echo "-------------------------------------------------------------"
            export PYOPTSPARSE_IMPORT_SNOPT_FROM=`pwd`
            echo "PYOPTSPARSE_IMPORT_SNOPT_FROM=$PYOPTSPARSE_IMPORT_SNOPT_FROM" >> $GITHUB_ENV

            cd ../..
          fi

      - name: Install pyOptSparse from GitHub
        if: matrix.PYOPTSPARSE && matrix.PYOPTSPARSE_FROM == 'github'
        run: |
          echo "Installing pyOptSparse from GitHub, IPOPT will not be available"
          pip install git+https://github.com/mdolab/pyoptsparse@v${{ matrix.PYOPTSPARSE }}

      - name: Install pyOptSparse from conda-forge
        if: matrix.PYOPTSPARSE && matrix.PYOPTSPARSE_FROM == 'conda-forge'
        run: |
          echo "Installing pyOptSparse from conda-forge, IPOPT will be available"
          conda install -c conda-forge pyoptsparse=${{ matrix.PYOPTSPARSE }} -q -y

      - name: Install pyOptSparse using build_pyoptsparse
        if: matrix.PYOPTSPARSE && matrix.PYOPTSPARSE_FROM == 'build_pyoptsparse'
        continue-on-error: false
        run: |
          conda install -c conda-forge swig -q -y

          python -m pip install git+https://github.com/OpenMDAO/build_pyoptsparse

          if [[ "${{ matrix.PYOPTSPARSE }}" == "latest" ]]; then
            function latest_version() {
              local REPO_URL=$1/releases/latest
              local LATEST_URL=`curl -fsSLI -o /dev/null -w %{url_effective} $REPO_URL`
              local LATEST_VER=`echo $LATEST_URL | awk '{split($0,a,"/tag/"); print a[2]}'`
              echo $LATEST_VER
            }
            BRANCH="-b $(latest_version https://github.com/mdolab/pyoptsparse)"
          else
            BRANCH="-b v${{ matrix.PYOPTSPARSE }}"
          fi

          if [[ "${{ matrix.PAROPT }}" ]]; then
            PAROPT="-a"
          fi

          if [[ "${{ matrix.SNOPT }}" == "7.7" && "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
            echo "  > Secure copying SNOPT 7.7 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT
            SNOPT="-s SNOPT/src"
          elif [[ "${{ matrix.SNOPT }}" == "7.2" && "${{ secrets.SNOPT_LOCATION_72 }}" ]]; then
            echo "  > Secure copying SNOPT 7.2 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_72 }} SNOPT
            ls -lR SNOPT
            SNOPT="-s SNOPT/source"
          elif [[ "${{ matrix.SNOPT }}" ]]; then
            echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available"
          fi

          build_pyoptsparse -v $BRANCH $PAROPT $SNOPT

      - name: Install optional dependencies
        if: matrix.OPTIONAL == '[all]' || matrix.OPTIONAL == '[all,numba]'
        run: |
          echo "============================================================="
          echo "Install additional packages for testing/coverage"
          echo "============================================================="
          if [[  "${{ matrix.OS }}" == "macos-15" ]]; then
            brew install graphviz -q
          else
            conda install graphviz -q -y
          fi
          python -m pip install pyparsing psutil objgraph pyxdsm pydot

          echo "Pre-install playwright dependencies to avoid 'Playwright Host validation warning'"
          playwright install --with-deps

      - name: Display environment info
        id: env_info
        continue-on-error: true
        run: |
          conda info
          conda list

          echo "============================================================="
          echo "Check installed versions of Python, Numpy and Scipy"
          echo "============================================================="
          echo 'errors<<EOF' >> $GITHUB_OUTPUT

          FINAL_VER=`python -c "import platform; print(platform.python_version())"`
          if [[ ! "$FINAL_VER" == "${{ matrix.PY }}"* ]]; then
            echo "Python version was changed from ${{ matrix.PY }} to $FINAL_VER" >> $GITHUB_OUTPUT
          fi

          FINAL_VER=`python -c "import numpy; print(numpy.__version__)"`
          if [[ ! "$FINAL_VER" == "${{ matrix.NUMPY }}"* ]]; then
            echo "NumPy version was changed from ${{ matrix.NUMPY }} to $FINAL_VER" >> $GITHUB_OUTPUT
          fi

          FINAL_VER=`python -c "import scipy; print(scipy.__version__)"`
          if [[ ! "$FINAL_VER" == "${{ matrix.SCIPY }}"* ]]; then
            echo "SciPy version was changed from ${{ matrix.SCIPY }} to $FINAL_VER" >> $GITHUB_OUTPUT
          fi

          echo 'EOF' >> $GITHUB_OUTPUT

          grep changed $GITHUB_OUTPUT || echo ""

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      #
      # To access the terminal through the web-interface:
      #    1. Click on the web-browser link printed out in this action from the github
      #       workflow terminal
      #    2. Press cntrl + c in the new tab that opens up to reveal the terminal
      #    3. To activate the conda environment run:
      #        $ source $CONDA/etc/profile.d/conda.sh
      #        $ conda activate test
      - name: Setup tmate session
        if: ${{ inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

      - name: Build docs
        id: build_docs
        continue-on-error: true
        run: |
          export OPENMDAO_REPORTS=0
          export PYDEVD_DISABLE_FILE_VALIDATION=1

          cd openmdao/docs

          if [[ "${{ secrets.SNOPT_LOCATION_72 }}" || "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
            echo "============================================================="
            echo "Building docs with SNOPT examples."
            echo "============================================================="
          else
            echo "============================================================="
            echo "Disabling SNOPT cells in notebooks."
            echo "============================================================="
            python openmdao_book/other/disable_snopt_cells.py
          fi

          # start ipcluster to run MPI under notebooks
          ./ipcluster_start.sh
          sleep 12

          echo "============================================================="
          echo "Build the docs"
          echo "============================================================="
          python build_source_docs.py
          jupyter-book build -W --keep-going openmdao_book
          python copy_build_artifacts.py

      - name: Display doc build reports
        if: steps.build_docs.outcome == 'failure'
        run: |
          for f in $(find /home/runner/work/OpenMDAO/OpenMDAO/openmdao/docs/openmdao_book/_build/html/reports -name '*.log'); do
            echo "============================================================="
            echo $f
            echo "============================================================="
            cat $f
          done

      - name: Archive built docs
        if: steps.build_docs.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: built-docs-artifact
          path: openmdao/docs/openmdao_book/_build/html
          retention-days: 1

      - name: Publish docs
        if: github.event_name != 'pull_request' && matrix.PUBLISH
        env:
          DOCS_LOCATION: ${{ secrets.DOCS_LOCATION }}
        run: |
          if [[ "${#DOCS_LOCATION}" ]]; then
            echo "============================================================="
            echo "Create env with openssl compatible with hosting service"
            echo "============================================================="
            conda create -n upload python=3.11 packaging openssl=3
            conda activate upload

            echo "============================================================="
            echo "Publish docs"
            echo "============================================================="
            cd openmdao/docs
            python upload_doc_version.py openmdao_book/_build/html/ ${{ secrets.DOCS_LOCATION }}
          else
            echo "Docs destination not available."
          fi

      - name: Slack env change
        if: steps.env_info.outputs.errors != ''
        uses: act10ns/slack@v2.0.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'warning'
          message: |
            Environment change detected on `${{ matrix.NAME }}` build.
            Python, NumPy or SciPy was not the requested version:
            ```${{steps.env_info.outputs.errors}}```
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Slack doc build failure
        if: steps.build_docs.outcome == 'failure'
        uses: act10ns/slack@v2.0.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: ${{ steps.build_docs.outcome }}
          message: |
            Doc build failed on `${{ matrix.NAME }}` build.
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Fail the workflow if doc build failed
        if: steps.build_docs.outcome == 'failure'
        uses: actions/github-script@v3
        with:
          script: |
              let docs_fail = ${{ steps.build_docs.outcome == 'failure' }};
              if (docs_fail) {
                  core.setFailed('Doc build failed.');
              }
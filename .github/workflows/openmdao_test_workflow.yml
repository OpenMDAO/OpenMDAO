# Run OpenMDAO Tests
name: OpenMDAO Tests

on:
  # Trigger on push or pull request events for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  ubuntu_tests:
    runs-on: ubuntu-latest

    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        include:
          # test baseline versions
          - NAME: Baseline
            PY: '3.10'
            NUMPY: 1.22
            SCIPY: 1.7
            PETSc: 3.16
            PYOPTSPARSE: 'v2.8.3'
            PAROPT: true
            SNOPT: 7.7
            OPTIONAL: '[all]'
            JAX: true
            BANDIT: true
            TESTS: true

          # test latest versions
          - NAME: Latest
            PY: 3
            NUMPY: 1
            SCIPY: 1
            PETSc: 3
            PYOPTSPARSE: 'latest'
            PAROPT: true
            SNOPT: 7.7
            OPTIONAL: '[all]'
            TESTS: true

          # test minimal install
          - NAME: Minimal
            PY: 3
            NUMPY: 1
            SCIPY: 1
            PYOPTSPARSE: 'conda-forge'
            OPTIONAL: '[test]'
            TESTS: true

          # test oldest supported versions
          - NAME: Oldest
            PY: 3.8
            NUMPY: 1.22
            SCIPY: 1.7
            OPENMPI: '4.0'
            MPI4PY: '3.0'
            PETSc: 3.13
            PYOPTSPARSE: 'v1.2'
            SNOPT: 7.2
            OPTIONAL: '[all]'
            TESTS: true

          # build docs (baseline versions)
          - NAME: BuildDocs
            PY: '3.10'
            NUMPY: 1.22
            SCIPY: 1.7
            PETSc: 3.16
            PYOPTSPARSE: 'v2.8.3'
            SNOPT: 7.7
            OPTIONAL: '[all]'
            JAX: true
            BUILD_DOCS: true

    name: Ubuntu ${{ matrix.NAME }}

    steps:
      - name: Display run details
        run: |
          echo "============================================================="
          echo "Run #${GITHUB_RUN_NUMBER}"
          echo "Run ID: ${GITHUB_RUN_ID}"
          echo "Testing: ${GITHUB_REPOSITORY}"
          echo "Triggered by: ${GITHUB_EVENT_NAME}"
          echo "Initiated by: ${GITHUB_ACTOR}"
          echo "============================================================="

      - name: Create SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.PY }}
          channels: conda-forge,defaults
          channel-priority: true
          auto-update-conda: true

      - name: Install OpenMDAO
        shell: bash -l {0}
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y

          python -m pip install --upgrade pip

          # setuptools v65.0.0 breaks pyoptsparse install with:
          # ModuleNotFoundError: No module named 'distutils.msvccompiler'
          python -m pip install 'setuptools<65.0.0'

          echo "============================================================="
          echo "Install OpenMDAO"
          echo "============================================================="
          python -m pip install .${{ matrix.OPTIONAL }}

      - name: Install jax
        if: matrix.JAX
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install jax"
          echo "============================================================="
          python -m pip install jax jaxlib

      - name: Install PETSc
        if: matrix.PETSc
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install PETSc"
          echo "============================================================="
          if [[ "${{ matrix.OPENMPI }}" ]]; then
            COMPILERS="cython compilers openmpi-mpicc=${{ matrix.OPENMPI }}"
          else
            COMPILERS="cython compilers openmpi-mpicc"
          fi

          if [[  "${{ matrix.MPI4PY }}" ]]; then
            MPI4PY="mpi4py=${{ matrix.MPI4PY }}"
          else
            MPI4PY="mpi4py"
          fi

          conda install $COMPILERS $MPI4PY petsc4py=${{ matrix.PETSc }} -q -y

          export OMPI_MCA_rmaps_base_oversubscribe=1
          echo "-----------------------"
          echo "Quick test of mpi4py:"
          mpirun -n 3 python -c "from mpi4py import MPI; print(f'Rank: {MPI.COMM_WORLD.rank}')"
          echo "-----------------------"
          echo "Quick test of petsc4py:"
          mpirun -n 3 python -c "import numpy; from mpi4py import MPI; comm = MPI.COMM_WORLD; \
                                 import petsc4py; petsc4py.init(); \
                                 x = petsc4py.PETSc.Vec().createWithArray(numpy.ones(5)*comm.rank, comm=comm);  \
                                 print(x.getArray())"
          echo "-----------------------"

          echo "OMPI_MCA_rmaps_base_oversubscribe=1" >> $GITHUB_ENV

      - name: Install pyOptSparse
        if: matrix.PYOPTSPARSE
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install pyoptsparse"
          echo "============================================================="

          if [[ "${{ matrix.PYOPTSPARSE }}" == "conda-forge" ]]; then
            if [[ "${{ matrix.SNOPT }}" ]]; then
              echo "SNOPT ${{ matrix.SNOPT }} was requested but is not available on conda-forge"
            fi

            conda install -c conda-forge pyoptsparse
          else
            pip install git+https://github.com/OpenMDAO/build_pyoptsparse

            if [[ "${{ matrix.PYOPTSPARSE }}" == "latest" ]]; then
              LATEST_URL=`curl -fsSLI -o /dev/null -w %{url_effective} https://github.com/mdolab/pyoptsparse/releases/latest`
              LATEST_VER=`echo $LATEST_URL | awk '{split($0,a,"/tag/"); print a[2]}'`
              BRANCH="-b $LATEST_VER"
            else
              BRANCH="-b ${{ matrix.PYOPTSPARSE }}"
            fi

            if [[ "${{ matrix.PAROPT }}" ]]; then
              PAROPT="-a"
            fi

            if [[ "${{ matrix.SNOPT }}" == "7.7" && "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
              echo "  > Secure copying SNOPT 7.7 over SSH"
              mkdir SNOPT
              scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT
              SNOPT="-s SNOPT/src"
            elif [[ "${{ matrix.SNOPT }}" == "7.2" && "${{ secrets.SNOPT_LOCATION_72 }}" ]]; then
              echo "  > Secure copying SNOPT 7.2 over SSH"
              mkdir SNOPT
              scp -qr ${{ secrets.SNOPT_LOCATION_72 }} SNOPT
              SNOPT="-s SNOPT/source"
            elif [[ "${{ matrix.SNOPT }}" ]]; then
              echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available"
            fi

            build_pyoptsparse $BRANCH $PAROPT $SNOPT
          fi

      - name: Install optional dependencies
        if: matrix.OPTIONAL == '[all]'
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install additional packages for testing/coverage"
          echo "============================================================="
          python -m pip install psutil objgraph git+https://github.com/mdolab/pyxdsm

      - name: Display environment info
        shell: bash -l {0}
        run: |
          conda info
          conda list

          echo "============================================================="
          echo "Check installed versions of Python, Numpy and Scipy"
          echo "============================================================="
          python -c "import sys; assert str(sys.version).startswith(str(${{ matrix.PY }})), \
                    f'Python version {sys.version} is not the requested version (${{ matrix.PY }})'"

          python -c "import numpy; assert str(numpy.__version__).startswith(str(${{ matrix.NUMPY }})), \
                    f'Numpy version {numpy.__version__} is not the requested version (${{ matrix.NUMPY }})'"

          python -c "import scipy; assert str(scipy.__version__).startswith(str(${{ matrix.SCIPY }})), \
                    f'Scipy version {scipy.__version__} is not the requested version (${{ matrix.SCIPY }})'"

      - name: Audit dependencies
        shell: bash -l {0}
        run: |
          python -m pip install pip-audit
          echo "============================================================="
          echo "Scan environment for packages with known vulnerabilities"
          echo "(Temporarily ignoring PYSEC-2022-237, required by nbconvert)"
          echo "============================================================="
          python -m pip_audit --ignore-vuln PYSEC-2022-237

      - name: Run tests
        if: matrix.TESTS
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Run tests with coverage (from directory other than repo root)"
          echo "============================================================="
          cp .coveragerc $HOME
          cd $HOME
          testflo -n 2 openmdao --timeout=120 --show_skipped --coverage --coverpkg openmdao --durations=20

      - name: Submit coverage
        if: matrix.TESTS
        shell: bash -l {0}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: "github"
          COVERALLS_PARALLEL: true
        run: |
          echo "============================================================="
          echo "Submit coverage"
          echo "============================================================="
          cp $HOME/.coverage .
          python -m pip install coveralls
          SITE_DIR=`python -c 'import site; print(site.getsitepackages()[-1])'`
          coveralls --basedir $SITE_DIR

      - name: Build docs
        if: matrix.BUILD_DOCS
        id: build_docs
        shell: bash -l {0}
        run: |
          export OPENMDAO_REPORTS=0

          cd openmdao/docs
          if [[ "${{ secrets.SNOPT_LOCATION_72 }}" || "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
            echo "============================================================="
            echo "Building docs with SNOPT examples."
            echo "============================================================="
          else
            echo "============================================================="
            echo "Disabling SNOPT cells in notebooks."
            echo "============================================================="
            python openmdao_book/other/disable_snopt_cells.py
          fi

          # start ipcluster to run MPI under notebooks
          ./ipcluster_start.sh
          sleep 12

          echo "============================================================="
          echo "Build the docs"
          echo "============================================================="
          python build_source_docs.py
          jupyter-book build -W --keep-going openmdao_book
          python copy_build_artifacts.py

      - name: Display doc build reports
        if: failure() && matrix.BUILD_DOCS && steps.build_docs.outcome == 'failure'
        run: |
          for f in /home/runner/work/OpenMDAO/OpenMDAO/openmdao/docs/openmdao_book/_build/html/reports/*; do
            echo "============================================================="
            echo $f
            echo "============================================================="
            cat $f
          done

      - name: Publish docs
        if: ${{ github.event_name == 'push' && matrix.BUILD_DOCS }}
        shell: bash -l {0}
        env:
          DOCS_LOCATION: ${{ secrets.DOCS_LOCATION }}
        run: |
          if [[ "${#DOCS_LOCATION}" ]]; then
            echo "============================================================="
            echo "Publish docs"
            echo "============================================================="
            cd openmdao/docs
            python upload_doc_version.py openmdao_book/_build/html/ ${{ secrets.DOCS_LOCATION }}
          else
            echo "Docs destination not available."
          fi

      - name: Scan for security issues
        if: matrix.BANDIT
        id: bandit
        shell: bash -l {0}
        run: |
          python -m pip install bandit
          echo "============================================================="
          echo "Run bandit scan for high/medium severity issues"
          echo "============================================================="
          cd $GITHUB_WORKSPACE
          python -m bandit -c bandit.yml -ll -r openmdao

      - name: Notify slack
        uses: act10ns/slack@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
        if: always()

  windows_tests:
    runs-on: windows-latest

    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          # baseline versions
          - NAME: Baseline
            PY: 3.9
            NUMPY: 1.22
            SCIPY: 1.6

    name: Windows ${{ matrix.NAME }}

    steps:
      - name: Display run details
        run: |
          echo "============================================================="
          echo "Run #$env:GITHUB_RUN_NUMBER"
          echo "Run ID: $env:GITHUB_RUN_ID"
          echo "Testing: $env:GITHUB_REPOSITORY"
          echo "Triggered by: $env:GITHUB_EVENT_NAME"
          echo "Initiated by: $env:GITHUB_ACTOR"
          echo "============================================================="

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.PY }}
          conda-version: "*"
          channels: conda-forge,defaults
          channel-priority: true

      - name: Install OpenDMAO
        shell: pwsh
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y

          python -m pip install --upgrade pip

          echo "============================================================="
          echo "Install OpenMDAO"
          echo "============================================================="
          python -m pip install .[all]

      - name: Install optional dependencies
        shell: pwsh
        run: |
          echo "============================================================="
          echo "Install additional packages for testing/coverage"
          echo "============================================================="
          python -m pip install psutil objgraph git+https://github.com/mdolab/pyxdsm

      - name: Display environment info
        shell: pwsh
        run: |
          conda info
          conda list

          echo "============================================================="
          echo "Check installed versions of Python, Numpy and Scipy"
          echo "============================================================="
          python -c "import sys; assert str(sys.version).startswith(str(${{ matrix.PY }})), \
                    f'Python version {sys.version} is not the requested version (${{ matrix.PY }})'"

          python -c "import numpy; assert str(numpy.__version__).startswith(str(${{ matrix.NUMPY }})), \
                    f'Numpy version {numpy.__version__} is not the requested version (${{ matrix.NUMPY }})'"

          python -c "import scipy; assert str(scipy.__version__).startswith(str(${{ matrix.SCIPY }})), \
                    f'Scipy version {scipy.__version__} is not the requested version (${{ matrix.SCIPY }})'"

      - name: Audit dependencies
        shell: bash -l {0}
        run: |
          python -m pip install pip-audit
          echo "============================================================="
          echo "Scan environment for packages with known vulnerabilities"
          echo "(Temporarily ignoring PYSEC-2022-237, required by nbconvert)"
          echo "============================================================="
          python -m pip_audit --ignore-vuln PYSEC-2022-237

      - name: Run tests
        shell: pwsh
        run: |
          echo "============================================================="
          echo "Run tests with coverage (from directory other than repo root)"
          echo "============================================================="
          copy .coveragerc $HOME
          cd $HOME
          testflo -n 2 openmdao --timeout=120 --show_skipped --coverage  --coverpkg openmdao --durations=20

      - name: Submit coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: "github"
          COVERALLS_PARALLEL: true
        shell: pwsh
        run: |
          echo "============================================================="
          echo "Submit coverage"
          echo "============================================================="
          copy $HOME\.coverage .
          python -m pip install coveralls
          $SITE_DIR=python -c "import site; print(site.getsitepackages()[-1].replace('lib\\site-', 'Lib\\site-'))"
          coveralls --basedir $SITE_DIR

      - name: Notify slack
        uses: act10ns/slack@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
        if: always()

  coveralls:
    name: Finish coverage
    needs: [ubuntu_tests, windows_tests]
    runs-on: ubuntu-latest
    steps:
    - uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true

  dymos_tests:
    name: Run Dymos Tests
    needs: [ubuntu_tests, windows_tests]
    runs-on: ubuntu-latest
    steps:
    - uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: Dymos Tests
        repo: ${{ github.repository_owner }}/dymos
        token: ${{ secrets.ACCESS_TOKEN }}
      if: github.event_name == 'push'

{"code_paraboloid_invalid_region": {"output_type": "display_data", "metadata": {"scrapbook": {"name": "code_paraboloid_invalid_region", "mime_prefix": "application/papermill.record/"}}, "data": {"text/plain": "class Paraboloid(om.ExplicitComponent):\n    \"\"\"\n    Evaluates the equation f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3\n\n    This version of Paraboloid optionally raises an analysis error when the\n    design variables x and y are in an invalid region defined by the specified\n    \"invalid_x\" and \"invalid_y\" ranges.\n\n    The path of evaluated points to the optmized solution is recorded as\n    well as the number of analysis errors raised.\n\n    Parameters\n    ----------\n    invalid_x : tuple of float or None\n        The range of values for x which will trigger an AnalysisError\n    invalid_y : tuple of float or None\n        The range of values for y which will trigger an AnalysisError\n    func : str, 'compute' or 'compute_partials'\n        The function that will raise the AnalysisError (compute or compute_partials).\n\n    Attributes\n    ----------\n    invalid_x : tuple of float or None\n        The range of values for x which will trigger an AnalysisError\n    invalid_y : tuple of float or None\n        The range of values for y which will trigger an AnalysisError\n    func : str, 'compute' or 'compute_partials'\n        The function that will raise the AnalysisError (compute or compute_partials).\n    \"\"\"\n\n    def __init__(self, invalid_x=None, invalid_y=None, func='compute'):\n        super().__init__()\n        self.invalid_x = invalid_x\n        self.invalid_y = invalid_y\n        self.func = func\n\n        self.eval_count = -1\n        self.eval_history = []\n        self.raised_eval_errors = []\n\n        self.grad_count = -1\n        self.grad_history = []\n        self.raised_grad_errors = []\n\n    def setup(self):\n        self.add_input('x', val=0.0)\n        self.add_input('y', val=0.0)\n\n        self.add_output('f_xy', val=0.0)\n\n        self.declare_partials('*', '*')\n\n    def compute(self, inputs, outputs):\n        \"\"\"\n        f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3\n        \"\"\"\n        self.eval_count += 1\n\n        x = inputs['x']\n        y = inputs['y']\n\n        f_xy = outputs['f_xy'] = (x-3.0)**2 + x*y + (y+4.0)**2 - 3.0\n\n        self.eval_history.append((x.item(), y.item(), f_xy.item()))\n\n        if self.invalid_x and self.func == 'compute':\n            beg, end =  self.invalid_x\n            if x > beg and x < end:\n                self.raised_eval_errors.append(self.eval_count)\n                raise om.AnalysisError(f'Invalid x: {beg} < {x.item():8.4f} < {end}).')\n\n        if self.invalid_y and self.func == 'compute':\n            beg, end =  self.invalid_y\n            if y > beg and y < end:\n                self.raised_eval_errors.append(self.eval_count)\n                raise om.AnalysisError(f'Invalid y: {beg} < {y.item():8.4f} < {end}).')\n\n    def compute_partials(self, inputs, partials):\n        \"\"\"\n        Partial derivatives.\n        \"\"\"\n        self.grad_count += 1\n\n        x = inputs['x']\n        y = inputs['y']\n\n        partials['f_xy', 'x'] = 2.0*x - 6.0 + y\n        partials['f_xy', 'y'] = 2.0*y + 8.0 + x\n\n        self.grad_history.append((x.item(), y.item()))\n\n        if self.invalid_x and self.func == 'compute_partials':\n            beg, end =  self.invalid_x\n            if x > beg and x < end:\n                self.raised_grad_errors.append(self.grad_count)\n                raise om.AnalysisError(f'Invalid x: {beg} < {x.item():8.4f} < {end}).')\n\n        if self.invalid_y and self.func == 'compute_partials':\n            beg, end =  self.invalid_y\n            if y > beg and y < end:\n                self.raised_grad_errors.append(self.grad_count)\n                raise om.AnalysisError(f'Invalid y: {beg} < {y.item():8.4f} < {end}).')", "text/html": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.output_html .hll { background-color: #ffffcc }\n.output_html { background: #f8f8f8; }\n.output_html .c { color: #3D7B7B; font-style: italic } /* Comment */\n.output_html .err { border: 1px solid #FF0000 } /* Error */\n.output_html .k { color: #008000; font-weight: bold } /* Keyword */\n.output_html .o { color: #666666 } /* Operator */\n.output_html .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.output_html .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.output_html .cp { color: #9C6500 } /* Comment.Preproc */\n.output_html .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.output_html .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.output_html .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.output_html .gd { color: #A00000 } /* Generic.Deleted */\n.output_html .ge { font-style: italic } /* Generic.Emph */\n.output_html .gr { color: #E40000 } /* Generic.Error */\n.output_html .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.output_html .gi { color: #008400 } /* Generic.Inserted */\n.output_html .go { color: #717171 } /* Generic.Output */\n.output_html .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.output_html .gs { font-weight: bold } /* Generic.Strong */\n.output_html .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.output_html .gt { color: #0044DD } /* Generic.Traceback */\n.output_html .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.output_html .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.output_html .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.output_html .kp { color: #008000 } /* Keyword.Pseudo */\n.output_html .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.output_html .kt { color: #B00040 } /* Keyword.Type */\n.output_html .m { color: #666666 } /* Literal.Number */\n.output_html .s { color: #BA2121 } /* Literal.String */\n.output_html .na { color: #687822 } /* Name.Attribute */\n.output_html .nb { color: #008000 } /* Name.Builtin */\n.output_html .nc { color: #0000FF; font-weight: bold } /* Name.Class */\n.output_html .no { color: #880000 } /* Name.Constant */\n.output_html .nd { color: #AA22FF } /* Name.Decorator */\n.output_html .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.output_html .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.output_html .nf { color: #0000FF } /* Name.Function */\n.output_html .nl { color: #767600 } /* Name.Label */\n.output_html .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */\n.output_html .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.output_html .nv { color: #19177C } /* Name.Variable */\n.output_html .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */\n.output_html .w { color: #bbbbbb } /* Text.Whitespace */\n.output_html .mb { color: #666666 } /* Literal.Number.Bin */\n.output_html .mf { color: #666666 } /* Literal.Number.Float */\n.output_html .mh { color: #666666 } /* Literal.Number.Hex */\n.output_html .mi { color: #666666 } /* Literal.Number.Integer */\n.output_html .mo { color: #666666 } /* Literal.Number.Oct */\n.output_html .sa { color: #BA2121 } /* Literal.String.Affix */\n.output_html .sb { color: #BA2121 } /* Literal.String.Backtick */\n.output_html .sc { color: #BA2121 } /* Literal.String.Char */\n.output_html .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.output_html .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.output_html .s2 { color: #BA2121 } /* Literal.String.Double */\n.output_html .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.output_html .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.output_html .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.output_html .sx { color: #008000 } /* Literal.String.Other */\n.output_html .sr { color: #A45A77 } /* Literal.String.Regex */\n.output_html .s1 { color: #BA2121 } /* Literal.String.Single */\n.output_html .ss { color: #19177C } /* Literal.String.Symbol */\n.output_html .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.output_html .fm { color: #0000FF } /* Name.Function.Magic */\n.output_html .vc { color: #19177C } /* Name.Variable.Class */\n.output_html .vg { color: #19177C } /* Name.Variable.Global */\n.output_html .vi { color: #19177C } /* Name.Variable.Instance */\n.output_html .vm { color: #19177C } /* Name.Variable.Magic */\n.output_html .il { color: #666666 } /* Literal.Number.Integer.Long */</style><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Paraboloid</span><span class=\"p\">(</span><span class=\"n\">om</span><span class=\"o\">.</span><span class=\"n\">ExplicitComponent</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Evaluates the equation f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3</span>\n\n<span class=\"sd\">    This version of Paraboloid optionally raises an analysis error when the</span>\n<span class=\"sd\">    design variables x and y are in an invalid region defined by the specified</span>\n<span class=\"sd\">    &quot;invalid_x&quot; and &quot;invalid_y&quot; ranges.</span>\n\n<span class=\"sd\">    The path of evaluated points to the optmized solution is recorded as</span>\n<span class=\"sd\">    well as the number of analysis errors raised.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    invalid_x : tuple of float or None</span>\n<span class=\"sd\">        The range of values for x which will trigger an AnalysisError</span>\n<span class=\"sd\">    invalid_y : tuple of float or None</span>\n<span class=\"sd\">        The range of values for y which will trigger an AnalysisError</span>\n<span class=\"sd\">    func : str, &#39;compute&#39; or &#39;compute_partials&#39;</span>\n<span class=\"sd\">        The function that will raise the AnalysisError (compute or compute_partials).</span>\n\n<span class=\"sd\">    Attributes</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    invalid_x : tuple of float or None</span>\n<span class=\"sd\">        The range of values for x which will trigger an AnalysisError</span>\n<span class=\"sd\">    invalid_y : tuple of float or None</span>\n<span class=\"sd\">        The range of values for y which will trigger an AnalysisError</span>\n<span class=\"sd\">    func : str, &#39;compute&#39; or &#39;compute_partials&#39;</span>\n<span class=\"sd\">        The function that will raise the AnalysisError (compute or compute_partials).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">invalid_x</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">invalid_y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_x</span> <span class=\"o\">=</span> <span class=\"n\">invalid_x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_y</span> <span class=\"o\">=</span> <span class=\"n\">invalid_y</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_count</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_history</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raised_eval_errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad_count</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad_history</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raised_grad_errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"s1\">&#39;f_xy&#39;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">declare_partials</span><span class=\"p\">(</span><span class=\"s1\">&#39;*&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;*&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">outputs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">f_xy</span> <span class=\"o\">=</span> <span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;f_xy&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mf\">3.0</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"mf\">4.0</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mf\">3.0</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_history</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">(),</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">(),</span> <span class=\"n\">f_xy</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()))</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_x</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">beg</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span>  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_x</span>\n            <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">beg</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raised_eval_errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_count</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"n\">AnalysisError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Invalid x: </span><span class=\"si\">{</span><span class=\"n\">beg</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"s1\">8.4f</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">end</span><span class=\"si\">}</span><span class=\"s1\">).&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_y</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">beg</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span>  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_y</span>\n            <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"n\">beg</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raised_eval_errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">eval_count</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"n\">AnalysisError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Invalid y: </span><span class=\"si\">{</span><span class=\"n\">beg</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"s1\">8.4f</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">end</span><span class=\"si\">}</span><span class=\"s1\">).&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compute_partials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">partials</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Partial derivatives.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">partials</span><span class=\"p\">[</span><span class=\"s1\">&#39;f_xy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mf\">6.0</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n        <span class=\"n\">partials</span><span class=\"p\">[</span><span class=\"s1\">&#39;f_xy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mf\">8.0</span> <span class=\"o\">+</span> <span class=\"n\">x</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad_history</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">(),</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()))</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_x</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;compute_partials&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">beg</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span>  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_x</span>\n            <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"n\">beg</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raised_grad_errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad_count</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"n\">AnalysisError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Invalid x: </span><span class=\"si\">{</span><span class=\"n\">beg</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"s1\">8.4f</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">end</span><span class=\"si\">}</span><span class=\"s1\">).&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_y</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;compute_partials&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">beg</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span>  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_y</span>\n            <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"n\">beg</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raised_grad_errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad_count</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">om</span><span class=\"o\">.</span><span class=\"n\">AnalysisError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Invalid y: </span><span class=\"si\">{</span><span class=\"n\">beg</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span><span class=\"si\">:</span><span class=\"s1\">8.4f</span><span class=\"si\">}</span><span class=\"s1\"> &lt; </span><span class=\"si\">{</span><span class=\"n\">end</span><span class=\"si\">}</span><span class=\"s1\">).&#39;</span><span class=\"p\">)</span>\n</pre></div>\n", "text/latex": "\\begin{Verbatim}[commandchars=\\\\\\{\\}]\n\\PY{k}{class} \\PY{n+nc}{Paraboloid}\\PY{p}{(}\\PY{n}{om}\\PY{o}{.}\\PY{n}{ExplicitComponent}\\PY{p}{)}\\PY{p}{:}\n\\PY{+w}{    }\\PY{l+s+sd}{\\PYZdq{}\\PYZdq{}\\PYZdq{}}\n\\PY{l+s+sd}{    Evaluates the equation f(x,y) = (x\\PYZhy{}3)\\PYZca{}2 + xy + (y+4)\\PYZca{}2 \\PYZhy{} 3}\n\n\\PY{l+s+sd}{    This version of Paraboloid optionally raises an analysis error when the}\n\\PY{l+s+sd}{    design variables x and y are in an invalid region defined by the specified}\n\\PY{l+s+sd}{    \\PYZdq{}invalid\\PYZus{}x\\PYZdq{} and \\PYZdq{}invalid\\PYZus{}y\\PYZdq{} ranges.}\n\n\\PY{l+s+sd}{    The path of evaluated points to the optmized solution is recorded as}\n\\PY{l+s+sd}{    well as the number of analysis errors raised.}\n\n\\PY{l+s+sd}{    Parameters}\n\\PY{l+s+sd}{    \\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}}\n\\PY{l+s+sd}{    invalid\\PYZus{}x : tuple of float or None}\n\\PY{l+s+sd}{        The range of values for x which will trigger an AnalysisError}\n\\PY{l+s+sd}{    invalid\\PYZus{}y : tuple of float or None}\n\\PY{l+s+sd}{        The range of values for y which will trigger an AnalysisError}\n\\PY{l+s+sd}{    func : str, \\PYZsq{}compute\\PYZsq{} or \\PYZsq{}compute\\PYZus{}partials\\PYZsq{}}\n\\PY{l+s+sd}{        The function that will raise the AnalysisError (compute or compute\\PYZus{}partials).}\n\n\\PY{l+s+sd}{    Attributes}\n\\PY{l+s+sd}{    \\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}\\PYZhy{}}\n\\PY{l+s+sd}{    invalid\\PYZus{}x : tuple of float or None}\n\\PY{l+s+sd}{        The range of values for x which will trigger an AnalysisError}\n\\PY{l+s+sd}{    invalid\\PYZus{}y : tuple of float or None}\n\\PY{l+s+sd}{        The range of values for y which will trigger an AnalysisError}\n\\PY{l+s+sd}{    func : str, \\PYZsq{}compute\\PYZsq{} or \\PYZsq{}compute\\PYZus{}partials\\PYZsq{}}\n\\PY{l+s+sd}{        The function that will raise the AnalysisError (compute or compute\\PYZus{}partials).}\n\\PY{l+s+sd}{    \\PYZdq{}\\PYZdq{}\\PYZdq{}}\n\n    \\PY{k}{def} \\PY{n+nf+fm}{\\PYZus{}\\PYZus{}init\\PYZus{}\\PYZus{}}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{p}{,} \\PY{n}{invalid\\PYZus{}x}\\PY{o}{=}\\PY{k+kc}{None}\\PY{p}{,} \\PY{n}{invalid\\PYZus{}y}\\PY{o}{=}\\PY{k+kc}{None}\\PY{p}{,} \\PY{n}{func}\\PY{o}{=}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{compute}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{)}\\PY{p}{:}\n        \\PY{n+nb}{super}\\PY{p}{(}\\PY{p}{)}\\PY{o}{.}\\PY{n+nf+fm}{\\PYZus{}\\PYZus{}init\\PYZus{}\\PYZus{}}\\PY{p}{(}\\PY{p}{)}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}x} \\PY{o}{=} \\PY{n}{invalid\\PYZus{}x}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}y} \\PY{o}{=} \\PY{n}{invalid\\PYZus{}y}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{func} \\PY{o}{=} \\PY{n}{func}\n\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{eval\\PYZus{}count} \\PY{o}{=} \\PY{o}{\\PYZhy{}}\\PY{l+m+mi}{1}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{eval\\PYZus{}history} \\PY{o}{=} \\PY{p}{[}\\PY{p}{]}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{raised\\PYZus{}eval\\PYZus{}errors} \\PY{o}{=} \\PY{p}{[}\\PY{p}{]}\n\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{grad\\PYZus{}count} \\PY{o}{=} \\PY{o}{\\PYZhy{}}\\PY{l+m+mi}{1}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{grad\\PYZus{}history} \\PY{o}{=} \\PY{p}{[}\\PY{p}{]}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{raised\\PYZus{}grad\\PYZus{}errors} \\PY{o}{=} \\PY{p}{[}\\PY{p}{]}\n\n    \\PY{k}{def} \\PY{n+nf}{setup}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{p}{)}\\PY{p}{:}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{add\\PYZus{}input}\\PY{p}{(}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{x}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{,} \\PY{n}{val}\\PY{o}{=}\\PY{l+m+mf}{0.0}\\PY{p}{)}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{add\\PYZus{}input}\\PY{p}{(}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{y}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{,} \\PY{n}{val}\\PY{o}{=}\\PY{l+m+mf}{0.0}\\PY{p}{)}\n\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{add\\PYZus{}output}\\PY{p}{(}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{f\\PYZus{}xy}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{,} \\PY{n}{val}\\PY{o}{=}\\PY{l+m+mf}{0.0}\\PY{p}{)}\n\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{declare\\PYZus{}partials}\\PY{p}{(}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{*}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{,} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{*}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{)}\n\n    \\PY{k}{def} \\PY{n+nf}{compute}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{p}{,} \\PY{n}{inputs}\\PY{p}{,} \\PY{n}{outputs}\\PY{p}{)}\\PY{p}{:}\n\\PY{+w}{        }\\PY{l+s+sd}{\\PYZdq{}\\PYZdq{}\\PYZdq{}}\n\\PY{l+s+sd}{        f(x,y) = (x\\PYZhy{}3)\\PYZca{}2 + xy + (y+4)\\PYZca{}2 \\PYZhy{} 3}\n\\PY{l+s+sd}{        \\PYZdq{}\\PYZdq{}\\PYZdq{}}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{eval\\PYZus{}count} \\PY{o}{+}\\PY{o}{=} \\PY{l+m+mi}{1}\n\n        \\PY{n}{x} \\PY{o}{=} \\PY{n}{inputs}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{x}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]}\n        \\PY{n}{y} \\PY{o}{=} \\PY{n}{inputs}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{y}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]}\n\n        \\PY{n}{f\\PYZus{}xy} \\PY{o}{=} \\PY{n}{outputs}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{f\\PYZus{}xy}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]} \\PY{o}{=} \\PY{p}{(}\\PY{n}{x}\\PY{o}{\\PYZhy{}}\\PY{l+m+mf}{3.0}\\PY{p}{)}\\PY{o}{*}\\PY{o}{*}\\PY{l+m+mi}{2} \\PY{o}{+} \\PY{n}{x}\\PY{o}{*}\\PY{n}{y} \\PY{o}{+} \\PY{p}{(}\\PY{n}{y}\\PY{o}{+}\\PY{l+m+mf}{4.0}\\PY{p}{)}\\PY{o}{*}\\PY{o}{*}\\PY{l+m+mi}{2} \\PY{o}{\\PYZhy{}} \\PY{l+m+mf}{3.0}\n\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{eval\\PYZus{}history}\\PY{o}{.}\\PY{n}{append}\\PY{p}{(}\\PY{p}{(}\\PY{n}{x}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{p}{,} \\PY{n}{y}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{p}{,} \\PY{n}{f\\PYZus{}xy}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{p}{)}\\PY{p}{)}\n\n        \\PY{k}{if} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}x} \\PY{o+ow}{and} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{func} \\PY{o}{==} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{compute}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{:}\n            \\PY{n}{beg}\\PY{p}{,} \\PY{n}{end} \\PY{o}{=}  \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}x}\n            \\PY{k}{if} \\PY{n}{x} \\PY{o}{\\PYZgt{}} \\PY{n}{beg} \\PY{o+ow}{and} \\PY{n}{x} \\PY{o}{\\PYZlt{}} \\PY{n}{end}\\PY{p}{:}\n                \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{raised\\PYZus{}eval\\PYZus{}errors}\\PY{o}{.}\\PY{n}{append}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{eval\\PYZus{}count}\\PY{p}{)}\n                \\PY{k}{raise} \\PY{n}{om}\\PY{o}{.}\\PY{n}{AnalysisError}\\PY{p}{(}\\PY{l+s+sa}{f}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{Invalid x: }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{beg}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{x}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{l+s+si}{:}\\PY{l+s+s1}{8.4f}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{end}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{).}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{)}\n\n        \\PY{k}{if} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}y} \\PY{o+ow}{and} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{func} \\PY{o}{==} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{compute}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{:}\n            \\PY{n}{beg}\\PY{p}{,} \\PY{n}{end} \\PY{o}{=}  \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}y}\n            \\PY{k}{if} \\PY{n}{y} \\PY{o}{\\PYZgt{}} \\PY{n}{beg} \\PY{o+ow}{and} \\PY{n}{y} \\PY{o}{\\PYZlt{}} \\PY{n}{end}\\PY{p}{:}\n                \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{raised\\PYZus{}eval\\PYZus{}errors}\\PY{o}{.}\\PY{n}{append}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{eval\\PYZus{}count}\\PY{p}{)}\n                \\PY{k}{raise} \\PY{n}{om}\\PY{o}{.}\\PY{n}{AnalysisError}\\PY{p}{(}\\PY{l+s+sa}{f}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{Invalid y: }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{beg}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{y}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{l+s+si}{:}\\PY{l+s+s1}{8.4f}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{end}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{).}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{)}\n\n    \\PY{k}{def} \\PY{n+nf}{compute\\PYZus{}partials}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{p}{,} \\PY{n}{inputs}\\PY{p}{,} \\PY{n}{partials}\\PY{p}{)}\\PY{p}{:}\n\\PY{+w}{        }\\PY{l+s+sd}{\\PYZdq{}\\PYZdq{}\\PYZdq{}}\n\\PY{l+s+sd}{        Partial derivatives.}\n\\PY{l+s+sd}{        \\PYZdq{}\\PYZdq{}\\PYZdq{}}\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{grad\\PYZus{}count} \\PY{o}{+}\\PY{o}{=} \\PY{l+m+mi}{1}\n\n        \\PY{n}{x} \\PY{o}{=} \\PY{n}{inputs}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{x}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]}\n        \\PY{n}{y} \\PY{o}{=} \\PY{n}{inputs}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{y}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]}\n\n        \\PY{n}{partials}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{f\\PYZus{}xy}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{,} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{x}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]} \\PY{o}{=} \\PY{l+m+mf}{2.0}\\PY{o}{*}\\PY{n}{x} \\PY{o}{\\PYZhy{}} \\PY{l+m+mf}{6.0} \\PY{o}{+} \\PY{n}{y}\n        \\PY{n}{partials}\\PY{p}{[}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{f\\PYZus{}xy}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{,} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{y}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{]} \\PY{o}{=} \\PY{l+m+mf}{2.0}\\PY{o}{*}\\PY{n}{y} \\PY{o}{+} \\PY{l+m+mf}{8.0} \\PY{o}{+} \\PY{n}{x}\n\n        \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{grad\\PYZus{}history}\\PY{o}{.}\\PY{n}{append}\\PY{p}{(}\\PY{p}{(}\\PY{n}{x}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{p}{,} \\PY{n}{y}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{p}{)}\\PY{p}{)}\n\n        \\PY{k}{if} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}x} \\PY{o+ow}{and} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{func} \\PY{o}{==} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{compute\\PYZus{}partials}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{:}\n            \\PY{n}{beg}\\PY{p}{,} \\PY{n}{end} \\PY{o}{=}  \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}x}\n            \\PY{k}{if} \\PY{n}{x} \\PY{o}{\\PYZgt{}} \\PY{n}{beg} \\PY{o+ow}{and} \\PY{n}{x} \\PY{o}{\\PYZlt{}} \\PY{n}{end}\\PY{p}{:}\n                \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{raised\\PYZus{}grad\\PYZus{}errors}\\PY{o}{.}\\PY{n}{append}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{grad\\PYZus{}count}\\PY{p}{)}\n                \\PY{k}{raise} \\PY{n}{om}\\PY{o}{.}\\PY{n}{AnalysisError}\\PY{p}{(}\\PY{l+s+sa}{f}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{Invalid x: }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{beg}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{x}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{l+s+si}{:}\\PY{l+s+s1}{8.4f}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{end}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{).}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{)}\n\n        \\PY{k}{if} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}y} \\PY{o+ow}{and} \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{func} \\PY{o}{==} \\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{compute\\PYZus{}partials}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{:}\n            \\PY{n}{beg}\\PY{p}{,} \\PY{n}{end} \\PY{o}{=}  \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{invalid\\PYZus{}y}\n            \\PY{k}{if} \\PY{n}{y} \\PY{o}{\\PYZgt{}} \\PY{n}{beg} \\PY{o+ow}{and} \\PY{n}{y} \\PY{o}{\\PYZlt{}} \\PY{n}{end}\\PY{p}{:}\n                \\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{raised\\PYZus{}grad\\PYZus{}errors}\\PY{o}{.}\\PY{n}{append}\\PY{p}{(}\\PY{n+nb+bp}{self}\\PY{o}{.}\\PY{n}{grad\\PYZus{}count}\\PY{p}{)}\n                \\PY{k}{raise} \\PY{n}{om}\\PY{o}{.}\\PY{n}{AnalysisError}\\PY{p}{(}\\PY{l+s+sa}{f}\\PY{l+s+s1}{\\PYZsq{}}\\PY{l+s+s1}{Invalid y: }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{beg}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{y}\\PY{o}{.}\\PY{n}{item}\\PY{p}{(}\\PY{p}{)}\\PY{l+s+si}{:}\\PY{l+s+s1}{8.4f}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{ \\PYZlt{} }\\PY{l+s+si}{\\PYZob{}}\\PY{n}{end}\\PY{l+s+si}{\\PYZcb{}}\\PY{l+s+s1}{).}\\PY{l+s+s1}{\\PYZsq{}}\\PY{p}{)}\n\\end{Verbatim}\n"}}}